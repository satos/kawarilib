#==============================================================================
#
# 「華和梨」イベント処理用簡易スクリプト(Kawari Easy Event Programmed Script)
#  QuizShow制御
#
# ＫＥＥＰＳ製作   ：こやま☆あきら
# OpenKEEPS製作    : ＯｐｅｎＫＥＥＰＳプロジェクトチーム
# OpenKEEPSページ  : http://keeps.sourceforge.jp
#
#==============================================================================
# 動作対象：「華和梨」Phase 8.1.0 及び上位互換版
#           「何か」（現「伺か」）MATERIA period 583 以上
#           CROW、SSP、ninix、偽林檎での動作を考慮
#==============================================================================


#QuizShow内部処理==============================================================

#汎用序数生成(OrdinalNumber)---------------------------------------------------

OrdinalNumber.upper : A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z
OrdinalNumber.lower : a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z
OrdinalNumber.mbupper : Ａ,Ｂ,Ｃ,Ｄ,Ｅ,Ｆ,Ｇ,Ｈ,Ｉ,Ｊ,Ｋ,Ｌ,Ｍ,Ｎ,Ｏ,Ｐ,Ｑ,Ｒ,Ｓ,Ｔ,Ｕ,Ｖ,Ｗ,Ｘ,Ｙ,Ｚ
OrdinalNumber.mblower : ａ,ｂ,ｃ,ｄ,ｅ,ｆ,ｇ,ｈ,ｉ,ｊ,ｋ,ｌ,ｍ,ｎ,ｏ,ｐ,ｑ,ｒ,ｓ,ｔ,ｕ,ｖ,ｗ,ｘ,ｙ,ｚ
OrdinalNumber.aiuhira : あ,い,う,え,お,か,き,く,け,こ,さ,し,す,せ,そ,た,ち,つ,て,と,な,に,ぬ,ね,の,は,ひ,ふ,へ,ほ,ま,み,む,め,も,や,ゆ,よ,ら,り,る,れ,ろ,わ,を,ん
OrdinalNumber.aiukata : ア,イ,ウ,エ,オ,カ,キ,ク,ケ,コ,サ,シ,ス,セ,ソ,タ,チ,ツ,テ,ト,ナ,ニ,ヌ,ネ,ノ,ハ,ヒ,フ,ヘ,ホ,マ,ミ,ム,メ,モ,ヤ,ユ,ヨ,ラ,リ,ル,レ,ロ,ワ,ヲ,ン
OrdinalNumber.irohahira : い,ろ,は,に,ほ,へ,と,ち,り,ぬ,る,を,わ,か,よ,た,れ,そ,つ,ね,な,ら,む,う,ゐ,の,お,く,や,ま,け,ふ,こ,え,て,あ,さ,き,ゆ,め,み,し,ゑ,ひ,も,せ,す
OrdinalNumber.irohakata : イ,ロ,ハ,ニ,ホ,ヘ,ト,チ,リ,ヌ,ル,ヲ,ワ,カ,ヨ,タ,レ,ソ,ツ,ネ,ナ,ラ,ム,ウ,ヰ,ノ,オ,ク,ヤ,マ,ケ,フ,コ,エ,テ,ア,サ,キ,ユ,メ,ミ,シ,ヱ,ヒ,モ,セ,ス

=kis
function OrdinalNumber $(
	if $[ $(size @arg) != 3  ] $(return);

	setstr @n $(NonNegative $@arg[2]);

	# 生成する序数種類
	if $[ $@arg[1] == 0 ] $(
		return ${@n};
	) else if $[ $@arg[1] == 1 ] $(
		return $(tr ${@n} 0123456789 ０１２３４５６７８９);
	) else if $[ $@arg[1] == 2 ] $(
		setstr @table $@arg[0].upper;
	) else if $[ $@arg[1] == 3 ] $(
		setstr @table $@arg[0].lower;
	) else if $[ $@arg[1] == 4 ] $(
		setstr @table $@arg[0].mbupper;
	) else if $[ $@arg[1] == 5 ] $(
		setstr @table $@arg[0].mblower;
	) else if $[ $@arg[1] == 6 ] $(
		setstr @table $@arg[0].aiuhira;
	) else if $[ $@arg[1] == 7 ] $(
		setstr @table $@arg[0].aiukata;
	) else if $[ $@arg[1] == 8 ] $(
		setstr @table $@arg[0].irohahira;
	) else if $[ $@arg[1] == 9 ] $(
		setstr @table $@arg[0].irohakata;
	) else $(
		return;
	);

	setstr @n $(NonNegative $[ ${@n} - 1 ]);
	setstr @order $(size ${@table});

	while $[ ${@n} >= ${@order} ] $(
		setstr @i $[ ${@n} % ${@order} ];
		# -1すると順序カウント、引かないとn進数
		setstr @n $[ ${@n} / ${@order} -1 ];
		unshiftstr @answer $${@table}[${@i}];
	);
	unshiftstr @answer $${@table}[${@n}];

	get @answer;
);
=end

#クイズ開始(Quiz.Begin)--------------------------------------------------------

=kis
function Quiz.Begin $(
	# 関連エントリの初期化
	cleartree QuizShow;
	setstr QuizShow.right 0;
	setstr QuizShow.wrong 0;
	setstr QuizShow.total ${quiz.total};
	listsub @totaldeck question;
	if $[ $(size @totaldeck) < ${QuizShow.total} ] $(
		# 出題予定数より実際の問題が少なかったら、全問出題で代用
		setstr QuizShow.total $(size @totaldeck);
	);
	# サドンデスモードならば全問出題
	if $[ ${QuizShowConfig.Mode} == 1 ] $(
		setstr QuizShow.total $(size @totaldeck);
	);

	# どの問題を出題するかランダムに選択
	loop ${QuizShow.total} $(
		setstr @i $(rand $(size @totaldeck));
		pushstr QuizShow.deck $@totaldeck[${@i}];
		clear @totaldeck[${@i}];
	);
	# クイズ第1問目トーク
	TalkSearch kp.onquizshowfirstquestion;
	# 実際にクイズ出題
	Quiz.MakeQuestion;
);
=end

kp.onquizshowfirstquestion (
	TalkQuizShowFirstQuestion,
	TalkQuizShowQuestion
)

# 保護対象エントリであることを宣言
kp.EntryToProtect : kp.onquizshowfirstquestion

# 保護対象関数であることを宣言
kp.FunctionToProtect : Quiz.Begin

#問題データからスクリプトを生成(Quiz.MakeQuestion)-----------------------------

=kis
function Quiz.MakeQuestion $(
	# 出題予定問題から出題をランダムに選択
	setstr @i $(rand $(size QuizShow.deck));
	setstr @suit $QuizShow.deck[${@i}];
	clear QuizShow.deck[${@i}];

	# スクリプト生成
	copy ${@suit} @Q;
	# 設問をストリームへ
	pushstr @Q.stream $(shift @Q)"\\n";
	setstr @Q.rightchoice $(shift @Q)",right";
	until $[ $(size @Q) == 0 ] $(
		setstr @i $(rand $(size @Q));
		pushstr @Q.choice $(get @Q[${@i}])",wrong";
		clear @Q[${@i}];
	);
	# 正解の選択肢をランダムな場所に
	insertstr @Q.choice[$(rand $(size @Q.choice))] ${@Q.rightchoice};
	# 選択肢をストリームへ
	setstr @i 1;
	while $(size @Q.choice) $(
		pushstr @Q.stream (
			\n
			${QuizShowConfig.Marker}
			\q[
			$(
				if $(size QuizShowConfig.OrdinalNumber) 
					$(OrdinalNumber ${QuizShowConfig.OrdinalNumber} ${@i})"."
			)
			$(shift @Q.choice)
			]
		);
		inc @i;
	);
	# タイムアウトの設定
	if $(size QuizShowConfig.Timeout) $(
		pushstr @Q.stream "\\![set,choicetimeout,"${QuizShowConfig.Timeout}"]";
	);
	pushstr @Q.stream "\\e";

	# メニューグループを「QuizShow＋クイズモード」に設定
	setMenuGroup "QuizShow"${QuizShowConfig.Mode};
	# スクリプトを返す
	get @Q.stream;
);
=end

# 保護対象関数であることを宣言
kp.FunctionToProtect : Quiz.MakeQuestion

#次の問題があれば出題、なければ終了(Quiz.NextOrFinish)-------------------------

=kis
function Quiz.NextOrFinish $(
	if $[ $(size QuizShow.deck) == 0 ] $(
		# クイズ終了トーク
		echo \x\c;
		if $[ ${QuizShow.right} == ${QuizShow.total} ] $(
			# 満点
			Talk TalkQuizShowFinishedFullmark;
		) else if $[ ${QuizShow.right} == 0 ] $(
			# 零点
			Talk TalkQuizShowFinishedZeropoint;
		) else $(
			# その他
			Talk TalkQuizShowFinished;
		);
		return;
	) else if $[ $(size QuizShow.deck) == 1 ] $(
		# 最後の問題
		TalkSearch kp.onquizshowlastquestion;
	) else $(
		Talk TalkQuizShowQuestion;
	);
	# 実際にクイズ出題
	Quiz.MakeQuestion;
);
=end

kp.onquizshowlastquestion (
	TalkQuizShowLastQuestion,
	TalkQuizShowQuestion
)

# 保護対象エントリであることを宣言
kp.EntryToProtect : kp.onquizshowlastquestion

# 保護対象関数であることを宣言
kp.FunctionToProtect : Quiz.NextOrFinish

#何番目の問題か？(Quiz.Qnow)---------------------------------------------------

=kis
function Quiz.Qnow $[ ${QuizShow.right} + ${QuizShow.wrong} + 1 ];
=end

# 保護対象関数であることを宣言
kp.FunctionToProtect : Quiz.Qnow

#占有する選択肢群--------------------------------------------------------------

# 正解
Select.QuizShow.right, Select.QuizShow1.right : $(
	inc QuizShow.right;
	# 正解トーク
	Talk TalkQuizShowRightAnswer;
	# 次の出題、又は終了
	Quiz.NextOrFinish;
)

# 間違い
Select.QuizShow.wrong : $(
	inc QuizShow.wrong;
	# 間違いトーク
	Talk TalkQuizShowWrongAnswer;
	# 次の出題、又は終了
	Quiz.NextOrFinish;
)

# タイムアウト(誤答扱い)
TalkTimeout.QuizShow : $(
	inc QuizShow.wrong;
	# 回答タイムアウトトーク
	Talk TalkQuizShowTimeout;
	# 次の出題、又は終了
	Quiz.NextOrFinish;
)

# サドンデスモードの間違い
Select.QuizShow1.wrong : $(
	clear QuizShow.deck;
	Talk TalkQuizShowWrongAnwer;
	echo \x\c;
	Talk TalkQuizShowSuddenDeath;
)

# サドンデスモードのタイムアウト(誤答扱い)
TalkTimeout.QuizShow1 : $(
	clear QuizShow.deck;
	Talk TalkQuizShowTimeout;
	echo \x\c;
	Talk TalkQuizShowSuddenDeath;
)

# 保護対象エントリであることを宣言
kp.EntryToProtect (
	Select.QuizShow.right,
	Select.QuizShow.wrong,
	TalkTimeout.QuizShow,
	Select.QuizShow1.right,
	Select.QuizShow1.wrong,
	TalkTimeout.QuizShow1
)

#読み込みのみ保証するエントリ群------------------------------------------------

:rem
# 現在の出題デッキ
QuizShow.deck :
# 正答数
QuizShow.right : 
# 誤答数
QuizShow.wrong :
# 出題数
QuizShow.total :
:endrem

#ユーザ側へのインターフェースとなるエントリ群----------------------------------

:rem
# クイズ第n問目トーク
TalkQuizShowQuestion : 
# 最初の問題トーク(省略可能)
TalkQuizShowFirstQuestion : 
# 最後の問題トーク(省略可能)
TalkQuizShowLastQuestion : 
# 正解トーク
TalkQuizShowRightAnswer : 
# 間違いトーク
TalkQuizShowWrongAnswer : 
# 回答タイムアウト
TalkQuizShowTimeout : 
# クイズ終了トーク
TalkQuizShowFinished : 
# クイズ終了トーク(全問正解)
TalkQuizShowFinishedFullmark :
# クイズ終了トーク(全問不正解)
TalkQuizShowFinishedZeropoint :
# サドンデスモードで全問回答前に終了
TalkQuizShowSuddenDeath :
# 先頭マーカー(省略可能)
QuizShowConfig.Marker : 
# 選択肢に番号を振るか？(省略可能、省略時は「なし」)
QuizShowConfig.OrdinalNumber : 
# QuizShowごとの出題数
quiz.total : 
# クイズの出題モード(無設定=通常、1=サドンデス)
QuizShowConfig.Mode :
# クイズ時のtimeoutまでの時間(ミリ秒)
QuizShowConfig.Timeout : 
:endrem

#==============================================================================
